/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var typescript_to_glsl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,17],$V2=[1,7],$V3=[1,21],$V4=[1,15],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,14],$V9=[1,19],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,18],$Ve=[5,27,28,31,32,36,41,42,43,46,56,78,82,83,89],$Vf=[5,19,27,28,31,32,36,37,41,42,43,46,56,78,82,83,89],$Vg=[10,34],$Vh=[1,41],$Vi=[1,36],$Vj=[1,38],$Vk=[2,75],$Vl=[1,52],$Vm=[2,81],$Vn=[1,55],$Vo=[10,18,34,48,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,79,86],$Vp=[1,61],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[10,18,34,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,79,86],$VK=[34,79],$VL=[1,112],$VM=[2,87],$VN=[1,147],$VO=[2,95],$VP=[1,146],$VQ=[1,152],$VR=[10,18,34,57,58,59,79,86],$VS=[10,18,34,57,58,59,60,61,79,86],$VT=[10,18,34,57,58,59,60,61,62,63,64,65,66,67,68,69,79,86],$VU=[10,18,34,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,79,86],$VV=[1,171],$VW=[1,175],$VX=[1,182],$VY=[34,86],$VZ=[22,37],$V_=[19,37],$V$=[5,19,27,28,31,32,36,37,41,42,43,46,56,78,82,83,88,89];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"statements_":6,"statements_without_vars":7,"statements_with_vars":8,"initialize_var_":9,";":10,"statement":11,"initialize_vars":12,"initialize_var":13,"statements":14,"case_statement":15,"case":16,"e":17,":":18,"break":19,"case_statements_":20,"case_statements":21,"default":22,"access_modifier":23,"public":24,"private":25,"top_level_statement":26,"const":27,"IDENTIFIER":28,"=":29,"initialize_var1":30,"function":31,"(":32,"identifiers":33,")":34,"{":35,"return":36,"}":37,"parameters":38,"bracket_statements":39,"statement_with_semicolon":40,"switch":41,"while":42,"for":43,"statement_with_semicolon_":44,"if_statement":45,"continue":46,"access_array":47,".":48,"++":49,"--":50,"+=":51,"-=":52,"*=":53,"/=":54,"dot_expr":55,"var":56,"?":57,"||":58,"|":59,"&&":60,"&":61,"!==":62,"===":63,"in":64,"instanceof":65,"<=":66,"<":67,">=":68,">":69,"+":70,"-":71,"*":72,"/":73,"%":74,"not_expr":75,"!":76,"parentheses_expr":77,"[":78,"]":79,"exprs":80,"parentheses_expr_":81,"NUMBER":82,"STRING_LITERAL":83,"parameter":84,"=>":85,",":86,"elif":87,"else":88,"if":89,"type_":90,"types":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"statements_with_vars",10:";",16:"case",18:":",19:"break",22:"default",24:"public",25:"private",27:"const",28:"IDENTIFIER",29:"=",31:"function",32:"(",34:")",35:"{",36:"return",37:"}",41:"switch",42:"while",43:"for",46:"continue",48:".",49:"++",50:"--",51:"+=",52:"-=",53:"*=",54:"/=",56:"var",57:"?",58:"||",59:"|",60:"&&",61:"&",62:"!==",63:"===",64:"in",65:"instanceof",66:"<=",67:"<",68:">=",69:">",70:"+",71:"-",72:"*",73:"/",74:"%",76:"!",78:"[",79:"]",82:"NUMBER",83:"STRING_LITERAL",85:"=>",86:",",88:"else",89:"if"},
productions_: [0,[3,2],[6,1],[6,1],[6,2],[6,3],[7,2],[7,1],[12,3],[12,1],[14,1],[15,6],[20,2],[20,1],[21,4],[21,1],[23,1],[23,1],[26,1],[26,5],[26,2],[26,10],[26,8],[4,2],[4,1],[11,2],[11,7],[11,5],[11,9],[11,1],[44,1],[44,1],[40,1],[40,2],[40,6],[40,3],[40,3],[40,5],[40,2],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[30,1],[13,1],[9,6],[17,5],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,1],[75,2],[75,1],[55,3],[55,1],[47,4],[77,3],[77,4],[77,1],[77,3],[77,1],[81,2],[81,3],[81,1],[81,1],[81,1],[84,3],[84,7],[38,3],[38,1],[38,0],[80,3],[80,1],[87,7],[87,2],[45,6],[45,5],[33,3],[33,1],[39,3],[39,2],[90,1],[91,3],[91,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 4:
this.$ = $$[$0-1] + ";"
break;
case 5: case 8:
this.$ = $$[$0-2]+";"+$$[$0];
break;
case 6: case 12:
this.$ = $$[$0-1]+$$[$0];
break;
case 7: case 9: case 24: case 71: case 86:
this.$ =
 $$[$0];
break;
case 10:
this.$ = $$[$0]
break;
case 11:
this.$ = ["case",$$[$0-4],":",$$[$0-2],"break;"].join(",")
break;
case 13:
this.$ =
 [$$[$0]];
break;
case 14:
this.$ = $$[$0-3]+["default:",$$[$0]].join("");
break;
case 19:
this.$ = "#define "+$$[$0-3]+" "+$$[$0-1];
break;
case 20:
this.$ = $$[$0-1]+";"
break;
case 21:
this.$ = "#define "+$$[$0-8]+"("+$$[$0-6]+") "+$$[$0-2];
break;
case 22:
this.$ = [$$[$0-1],$$[$0-6],"(",$$[$0-4],")",$$[$0]].join(" ");
break;
case 23:
this.$ = $$[$0-1]+"\\n"+$$[$0];
break;
case 25:
this.$ = [$$[$0-1],";"].join("");
break;
case 26:
this.$ = ["switch(",$$[$0-4],"){",$$[$0-1],"}"].join("");
break;
case 27:
this.$ = ["while(",$$[$0-2],")",$$[$0]].join("");
break;
case 28:
this.$ = ["for(",$$[$0-6],";",$$[$0-4],";",$$[$0-2],")",$$[$0]].join("");
break;
case 32: case 89: case 100:
this.$ = [$$[$0]];
break;
case 33:
this.$ = ["return",$$[$0]].join(" ");
break;
case 34:
this.$ = ["const",$$[$0-2],$$[$0-4],"=",$$[$0]].join(" ");
break;
case 35: case 36:
this.$ = [$$[$0-2],"=",$$[$0]].join(" ");
break;
case 37:
this.$ = ["set_var",[".",[$$[$0-4],$$[$0-2]]],$$[$0]];
break;
case 38: case 39:
this.$ = [$$[$0-1],$$[$0]].join(" ");
break;
case 40: case 41: case 42: case 43: case 49: case 50: case 51: case 52: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65:
this.$ = [$$[$0-2],$$[$0-1],$$[$0]].join(" ");
break;
case 44:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 45: case 46: case 69: case 95:
this.$ = $$[$0];
break;
case 47:
this.$ = [$$[$0-2]," ",$$[$0-4],"=",$$[$0]].join("");
break;
case 48:
this.$ = [$$[$0-4],"?",$$[$0-2],":",$$[$0]].join(" ")
break;
case 53:
this.$ = [$$[$0-2],'!=',$$[$0]].join(" ");
break;
case 54:
this.$ = [$$[$0-2],'==',$$[$0]].join(" ");
break;
case 55: case 56:
this.$ = ['in',$$[$0-2],$$[$0]];
break;
case 66:
this.$ = "-"+$$[$0];
break;
case 68:
this.$ = "!"+$$[$0];
break;
case 70:
this.$ = $$[$0-2]+"."+$$[$0];
break;
case 72:
this.$ = $$[$0-3]+"["+$$[$0-1]+"]";
break;
case 73:
this.$= $$[$0-2]+"()";
break;
case 74:
this.$= [$$[$0-3],"(",$$[$0-1],")"].join("");
break;
case 76:
this.$ = "("+$+")";
break;
case 78:
this.$ = "()";
break;
case 79:
this.$ = "("+$$[$0-1]+")";
break;
case 80: case 81: case 82:
this.$ = yytext;
break;
case 83:
this.$ = [$$[$0], $$[$0-2]].join(" ");
break;
case 84:
this.$ = ["function_parameter",$$[$0-3],$$[$0-4],$$[$0]];
break;
case 85: case 88: case 94:
this.$ = $$[$0-2]+","+$$[$0];
break;
case 87:
this.$ = ""
break;
case 90:
this.$ = ["else if(",$$[$0-3],")",$$[$0-1],$$[$0]].join(" ");
break;
case 91:
this.$ = ["else{",$$[$0],"}"].join("");
break;
case 92:
this.$ = ["if","(",$$[$0-3],")",$$[$0-1],$$[$0]].join(" ");
break;
case 93:
this.$ = ["if","(",$$[$0-2],")",$$[$0]].join(" ");
break;
case 96:
this.$= "{"+$$[$0-1]+"}";
break;
case 97:
this.$ = $$[$0-1]+";";
break;
case 99:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
}
},
table: [{3:1,4:2,9:13,11:4,26:3,27:$V0,28:$V1,30:6,31:$V2,32:$V3,36:$V4,40:8,41:$V5,42:$V6,43:$V7,45:12,46:$V8,47:16,56:$V9,77:20,78:$Va,81:22,82:$Vb,83:$Vc,89:$Vd},{1:[3]},{5:[1,26],9:13,11:4,26:27,27:$V0,28:$V1,30:6,31:$V2,32:$V3,36:$V4,40:8,41:$V5,42:$V6,43:$V7,45:12,46:$V8,47:16,56:$V9,77:20,78:$Va,81:22,82:$Vb,83:$Vc,89:$Vd},o($Ve,[2,24]),o($Ve,[2,18]),{28:[1,28]},{10:[1,29]},{28:[1,30]},{10:[1,31]},{32:[1,32]},{32:[1,33]},{32:[1,34]},o($Vf,[2,29]),o($Vg,[2,45]),o($Vg,[2,32]),{17:35,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{29:[1,43],78:$Vk},{29:[1,44],32:$Vl,48:[1,45],49:[1,46],50:[1,47],51:[1,48],52:[1,49],53:[1,50],54:[1,51],78:$Vm},{32:[1,53]},{28:[1,54]},{78:$Vn},{17:56,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},o($Vo,[2,77]),{17:59,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,79:[1,57],80:58,81:22,82:$Vb,83:$Vc},o($Vo,[2,80]),o($Vo,[2,82]),{1:[2,1]},o($Ve,[2,23]),{18:$Vp,29:[1,60]},o($Ve,[2,20]),{32:[1,62]},o($Vf,[2,25]),{17:63,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:64,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{9:13,27:$Vq,28:$V1,30:66,32:$V3,36:$V4,40:67,44:65,46:$V8,47:16,56:$V9,77:20,78:$Va,81:22,82:$Vb,83:$Vc},o($Vg,[2,33],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),{17:87,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},o($VJ,[2,67]),{28:$Vh,32:$V3,47:42,55:88,77:40,78:$Va,81:22,82:$Vb,83:$Vc},o($VJ,[2,69]),o($VJ,[2,71],{48:[1,89],78:$Vn}),o($Vo,$Vm,{32:$Vl}),o($Vo,$Vk),{17:90,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:91,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{28:[1,92],32:$V3,47:42,55:93,77:40,78:$Va,81:22,82:$Vb,83:$Vc},o($Vg,[2,38]),o($Vg,[2,39]),{17:94,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:95,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:96,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:97,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:59,28:$Vh,32:$V3,34:[1,98],47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,80:99,81:22,82:$Vb,83:$Vc},{17:100,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{18:[1,101]},{17:102,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{34:[1,103],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},o($Vo,[2,78]),{79:[1,104]},o($VK,[2,89],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,86:[1,105]}),{17:106,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{28:[1,107]},{28:[1,110],32:$VL,33:108,34:$VM,38:109,84:111},{34:[1,113],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{34:[1,114],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{10:[1,115]},o($Vg,[2,30]),o($Vg,[2,31]),{28:[1,116]},{17:117,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:118,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:119,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:120,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:121,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:122,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:123,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:124,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:125,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:126,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:127,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:128,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:129,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:130,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:131,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:132,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:133,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{17:134,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},o($VJ,[2,66]),o($VJ,[2,68]),{28:$Vh,32:$V3,47:42,55:135,77:40,78:$Va,81:22,82:$Vb,83:$Vc},o($Vg,[2,35],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vg,[2,36],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o([10,34,48,78],$Vm,{29:[1,136],32:$Vl}),o($Vg,[2,44]),o($Vg,[2,40],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vg,[2,41],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vg,[2,42],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vg,[2,43],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vo,[2,73]),{34:[1,137]},{34:[1,138],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{28:[1,139]},{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,79:[1,140]},o($Vo,[2,76]),o($Vo,[2,79]),{17:59,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,80:141,81:22,82:$Vb,83:$Vc},{10:[1,142],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{29:[1,143]},{34:[1,144]},{34:[1,145]},{18:$VN,34:$VO,86:$VP},{34:[2,86],86:[1,148]},{28:[1,149]},{35:[1,150]},{27:$Vq,28:$V1,32:$V3,35:$VQ,36:$V4,39:151,40:153,46:$V8,47:16,77:20,78:$Va,81:22,82:$Vb,83:$Vc},{17:154,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{18:$Vp},{18:[1,155],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},o($VR,[2,49],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VR,[2,50],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VS,[2,51],{62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VS,[2,52],{62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,53],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,54],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,55],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,56],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,57],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,58],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,59],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,60],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VU,[2,61],{72:$VG,73:$VH,74:$VI}),o($VU,[2,62],{72:$VG,73:$VH,74:$VI}),o($VJ,[2,63]),o($VJ,[2,64]),o($VJ,[2,65]),o($VJ,[2,70]),{17:156,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},o($Vo,[2,74]),{27:$Vq,28:$V1,32:$V3,35:$VQ,36:$V4,39:157,40:153,46:$V8,47:16,77:20,78:$Va,81:22,82:$Vb,83:$Vc},{29:[1,158]},o([10,18,29,34,48,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,79,86],[2,72]),o($VK,[2,88]),o($Ve,[2,19]),{17:159,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{35:[1,160]},{18:[1,161]},{28:[1,163],33:162},{28:[1,164]},{28:[1,166],32:$VL,34:$VM,38:165,84:111},{18:[1,167]},{15:170,16:$VV,20:169,21:168},o($Vf,[2,27]),{6:173,7:174,8:$VW,9:176,11:177,14:172,27:$Vq,28:$V1,32:$V3,36:$V4,40:8,41:$V5,42:$V6,43:$V7,45:12,46:$V8,47:16,56:$V9,77:20,78:$Va,81:22,82:$Vb,83:$Vc,89:$Vd},{10:[1,178]},{10:[1,179],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{17:180,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},o($Vg,[2,37],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vf,[2,93],{87:181,88:$VX}),{17:183,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},o($Vg,[2,34],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),{36:[1,184]},{28:[1,185]},{34:[2,94]},{34:$VO,86:$VP},o($VY,[2,83]),{34:[2,85]},{18:$VN},{28:[1,186]},{37:[1,187]},{22:[1,188],37:[2,15]},o($VZ,[2,13],{15:170,20:189,16:$VV}),{17:190,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{37:[1,191]},o($V_,[2,10]),o($V_,[2,2]),o($V_,[2,3]),{10:[1,192]},o($V_,[2,7],{40:8,45:12,47:16,77:20,81:22,11:177,7:193,27:$Vq,28:$V1,32:$V3,36:$V4,41:$V5,42:$V6,43:$V7,46:$V8,78:$Va,82:$Vb,83:$Vc,89:$Vd}),o($V$,[2,97]),{9:13,27:$Vq,28:$V1,30:66,32:$V3,36:$V4,40:67,44:194,46:$V8,47:16,56:$V9,77:20,78:$Va,81:22,82:$Vb,83:$Vc},o([10,18,34,79,86],[2,48],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vf,[2,92]),{27:$Vq,28:$V1,32:$V3,35:$VQ,36:$V4,39:196,40:153,46:$V8,47:16,77:20,78:$Va,81:22,82:$Vb,83:$Vc,89:[1,195]},o($Vg,[2,47],{57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),{17:197,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{27:$Vq,28:$V1,32:$V3,35:$VQ,36:$V4,39:198,40:153,46:$V8,47:16,77:20,78:$Va,81:22,82:$Vb,83:$Vc},{34:[1,199]},o($Vf,[2,26]),{18:[1,200]},o($VZ,[2,12]),{18:[1,201],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},o($V$,[2,96]),o($V_,[2,4],{8:[1,202]}),o($V_,[2,6]),{34:[1,203]},{32:[1,204]},o($Vf,[2,91]),{10:[1,205],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},o($Ve,[2,22]),{85:[1,206]},{6:173,7:174,8:$VW,9:176,11:177,14:207,27:$Vq,28:$V1,32:$V3,36:$V4,40:8,41:$V5,42:$V6,43:$V7,45:12,46:$V8,47:16,56:$V9,77:20,78:$Va,81:22,82:$Vb,83:$Vc,89:$Vd},{6:173,7:174,8:$VW,9:176,11:177,14:208,27:$Vq,28:$V1,32:$V3,36:$V4,40:8,41:$V5,42:$V6,43:$V7,45:12,46:$V8,47:16,56:$V9,77:20,78:$Va,81:22,82:$Vb,83:$Vc,89:$Vd},o($V_,[2,5]),{27:$Vq,28:$V1,32:$V3,35:$VQ,36:$V4,39:209,40:153,46:$V8,47:16,77:20,78:$Va,81:22,82:$Vb,83:$Vc},{17:210,28:$Vh,32:$V3,47:42,55:39,71:$Vi,75:37,76:$Vj,77:40,78:$Va,81:22,82:$Vb,83:$Vc},{37:[1,211]},{28:[1,212]},{37:[2,14]},{19:[1,213]},o($Vf,[2,28]),{34:[1,214],57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},o($Ve,[2,21]),o($VY,[2,84]),{10:[1,215]},{27:$Vq,28:$V1,32:$V3,35:$VQ,36:$V4,39:216,40:153,46:$V8,47:16,77:20,78:$Va,81:22,82:$Vb,83:$Vc},o([16,22,37],[2,11]),{87:217,88:$VX},o($Vf,[2,90])],
defaultActions: {26:[2,1],162:[2,94],165:[2,85],207:[2,14]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 82
break;
case 2:return 83
break;
case 3:return "$"
break;
case 4:return "function"
break;
case 5:return "continue"
break;
case 6:return "interface"
break;
case 7:return 'export'
break;
case 8:return 25
break;
case 9:return 24
break;
case 10:return 'extends'
break;
case 11:return "typeof"
break;
case 12:return "class"
break;
case 13:return "static"
break;
case 14:return 27
break;
case 15:return 89
break;
case 16:return 88
break;
case 17:return 'type'
break;
case 18:return "case"
break;
case 19:return 22
break;
case 20:return 36
break;
case 21:return 'yield'
break;
case 22:return 42
break;
case 23:return 41
break;
case 24:return 19
break;
case 25:return 43
break;
case 26:return 56
break;
case 27:return 'of'
break;
case 28:return 86
break;
case 29:return 10
break;
case 30:return '...'
break;
case 31:return 48
break;
case 32:return 18
break;
case 33:return 60
break;
case 34:return 61
break;
case 35:return 58
break;
case 36:return 59
break;
case 37:return 68
break;
case 38:return 69
break;
case 39:return 66
break;
case 40:return 67
break;
case 41:return 85
break;
case 42:return 63
break;
case 43:return 62
break;
case 44:return "!"
break;
case 45:return 29
break;
case 46:return 74
break;
case 47:return 53
break;
case 48:return 72
break;
case 49:return 54
break;
case 50:return 73
break;
case 51:return 52
break;
case 52:return 50
break;
case 53:return 71
break;
case 54:return 49
break;
case 55:return 51
break;
case 56:return 70
break;
case 57:return '^'
break;
case 58:return 35
break;
case 59:return 37
break;
case 60:return 78
break;
case 61:return 79
break;
case 62:return 57
break;
case 63:return 32
break;
case 64:return 34
break;
case 65:return 65
break;
case 66:return 64
break;
case 67:return 28
break;
case 68:return 5
break;
case 69:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:continue\b)/,/^(?:interface\b)/,/^(?:export\b)/,/^(?:private\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:typeof\b)/,/^(?:class\b)/,/^(?:static\b)/,/^(?:const\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:type\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:=>)/,/^(?:===)/,/^(?:!==)/,/^(?:!)/,/^(?:=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:\()/,/^(?:\))/,/^(?:instanceof\b)/,/^(?:in\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = typescript_to_glsl;
exports.Parser = typescript_to_glsl.Parser;
exports.parse = function () { return typescript_to_glsl.parse.apply(typescript_to_glsl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}